# ********RoostGPT********
"""
Test generated by RoostGPT for test p-unit-azure-may23 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=get_page_001a34506c
ROOST_METHOD_SIG_HASH=get_page_60a1ba921e

Scenario 1: Valid Medium Article URL Input
Details:
  TestName: test_valid_medium_article_url
  Description: This test process is designated to verify if the function can successfully process a valid Medium article URL.
Execution:
  Arrange: Provide a valid Medium article URL for entry.
  Act: Call the get_page function with the provided valid URL.
  Assert: Expect that the function runs without errors, and returns a BeautifulSoup object containing the parsed HTML content of the Medium article.
Validation:
  Rationalize the importance of the test and the expected result's connection to the function's specifications and business requirements.

Scenario 2: Invalid URL Input (Not a Medium Article)
Details:
  TestName: test_invalid_url_not_medium
  Description: This test is designated to validate that the function rejects URLs that do not match the "https://medium.com/" URL format or they not belong to Medium.
Execution:
  Arrange: Provide an invalid URL (not a Medium URL).
  Act: Call the get_page function with the invalid URL.
  Assert: Expect a system exit with an error message stating 'Please enter a valid website, or make sure it is a medium article'.
Validation:
  Rationalize the importance of the test and the expected result's connection to the function's specifications and business requirements. 

Scenario 3: Valid Non-Medium URL input
Details:
  TestName: test_valid_non_medium_url
  Description: This test verifies if the function correctly outputs an error message when a technically valid URL which is not a Medium URL is entered.
Execution:
  Arrange: Provide a technically valid URL not of Medium.
  Act: Call the get_page function with the valid non-Medium URL.
  Assert: Expect a system exit with an error message stating 'Please enter a valid website, or make sure it is a medium article'.
Validation:
  Validate that the function effectively disallows URLs not from Medium even if they are technically valid URLs.

Scenario 4: Test for Correctness of BeautifulSoup Output
Details:
  TestName: test_beautifulsoup_output_correctness
  Description: This test verifies that the function correctly parses the Medium article's HTML using BeautifulSoup and returns the correct object.
Execution:
  Arrange: Provide a valid Medium article URL for input.
  Act: Call the get_page function with the provided valid URL.
  Assert: Verify that the returned object is of BeautifulSoup type, and contains the correct tags and content from the Medium article.
Validation:
  Verify that the function is able to parse the HTML correctly and return the correct BeautifulSoup object. This is key for any subsequent operations to be performed on this parsed HTML.
"""

# ********RoostGPT********
import os
import sys
import pytest
import requests
import re
from bs4 import BeautifulSoup
from .scraping_medium import get_page  # use relative import here


class Test_ScrapingMediumGetPage:

    @pytest.mark.regression
    @pytest.mark.positive
    def test_valid_medium_article_url(self, monkeypatch):
        # Arrange
        input_url = "https://medium.com/demo-article"
        monkeypatch.setattr('builtins.input', lambda _: input_url)

        # Act
        soup_obj = get_page()

        # Assert
        assert isinstance(soup_obj, BeautifulSoup), "Function does not return a BeautifulSoup object on valid Medium URL"

    @pytest.mark.regression
    @pytest.mark.negative
    def test_invalid_url_not_medium(self, monkeypatch, capsys):
        # Arrange
        invalid_url = "invalid_url"
        monkeypatch.setattr('builtins.input', lambda _: invalid_url)

        # Act
        with pytest.raises(SystemExit): 
            get_page()

        # Assert
        captured = capsys.readouterr()
        assert "Please enter a valid website, or make sure it is a medium article" in captured.out

    @pytest.mark.regression
    @pytest.mark.negative
    def test_valid_non_medium_url(self, monkeypatch, capsys):
        # Arrange
        non_medium_url = "https://www.example.com"
        monkeypatch.setattr('builtins.input', lambda _: non_medium_url)

        # Act
        with pytest.raises(SystemExit): 
            get_page()

        # Assert
        captured = capsys.readouterr()
        assert "Please enter a valid website, or make sure it is a medium article" in captured.out

    @pytest.mark.regression
    @pytest.mark.positive
    def test_beautifulsoup_output_correctness(self, monkeypatch):
        # Arrange
        medium_article_url = "https://medium.com/demo-article"
        monkeypatch.setattr('requests.get', lambda _: medium_article_url)

        # Act
        soup_obj = get_page()

        # Assert
        assert isinstance(soup_obj, BeautifulSoup), "Function does not return a BeautifulSoup object on valid Medium URL"
        assert soup_obj.title.name == 'title', "Parsed HTML does not contain title tag"
        # TODO: Add further checks for specific tags which should exist in a Medium article HTML
