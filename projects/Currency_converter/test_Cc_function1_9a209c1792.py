# Test generated by RoostGPT for test py-sample using AI Type Open AI and AI Model gpt-4

"""
1. Scenario: Test if the function correctly exits when "Q" is entered as input.
    - Expected Result: The function should exit without any errors or further prompts.

2. Scenario: Test if the function correctly displays the list of available currencies when "SHOW" is entered as input.
    - Expected Result: The function should print the list of available currencies and then restart the function for a new input.

3. Scenario: Test if the function correctly converts the amount from one currency to another.
    - Expected Result: The function should correctly calculate the converted amount and print it.

4. Scenario: Test if the function correctly handles the case when the input doesn't contain exactly three elements (amount, from currency, to currency).
    - Expected Result: The function should not crash and should handle this invalid input gracefully.

5. Scenario: Test if the function correctly handles the case when the input contains non-numeric amount.
    - Expected Result: The function should not crash and should handle this invalid input gracefully.

6. Scenario: Test if the function correctly handles the case when the input contains currencies not in the list of available currencies.
    - Expected Result: The function should not crash and should handle this invalid input gracefully.

7. Scenario: Test if the function correctly handles the case when the input contains negative amount.
    - Expected Result: The function should not crash and should handle this invalid input gracefully.

8. Scenario: Test if the function correctly handles the case when the input contains zero amount.
    - Expected Result: The function should print that the converted amount is zero.

9. Scenario: Test if the function correctly handles the case when the conversion rate for the from currency to the to currency is zero.
    - Expected Result: The function should not crash and should handle this invalid input gracefully. 

10. Scenario: Test if the function correctly handles the case when the conversion rate for the from currency to the to currency is not available.
    - Expected Result: The function should not crash and should handle this invalid input gracefully.
"""
import pytest
import cc
from unittest.mock import patch

def test_function1_quit():
    with patch('builtins.input', return_value='Q'):
        with pytest.raises(SystemExit):
            cc.function1()

def test_function1_show_currencies():
    with patch('builtins.input', side_effect=['SHOW', 'Q']):
        with patch('cc.pprint') as mock_pprint:
            with pytest.raises(SystemExit):
                cc.function1()
            mock_pprint.assert_called_once_with(cc.currencies)

def test_function1_convert_currency():
    with patch('builtins.input', return_value='100 USD EUR'):
        with patch('builtins.print') as mock_print:
            cc.function1()
            mock_print.assert_called_once()  # TODO: Replace with the expected call

def test_function1_invalid_input():
    with patch('builtins.input', return_value='invalid input'):
        with pytest.raises(ValueError):
            cc.function1()

def test_function1_non_numeric_amount():
    with patch('builtins.input', return_value='non_numeric USD EUR'):
        with pytest.raises(ValueError):
            cc.function1()

def test_function1_invalid_currencies():
    with patch('builtins.input', return_value='100 INVALID_CURRENCY1 INVALID_CURRENCY2'):
        with pytest.raises(KeyError):
            cc.function1()

def test_function1_negative_amount():
    with patch('builtins.input', return_value='-100 USD EUR'):
        with pytest.raises(ValueError):
            cc.function1()

def test_function1_zero_amount():
    with patch('builtins.input', return_value='0 USD EUR'):
        with patch('builtins.print') as mock_print:
            cc.function1()
            mock_print.assert_called_once_with('0.0 of currency USD amounts to 0.0 of currency EUR today')

def test_function1_zero_conversion_rate():
    with patch('builtins.input', return_value='100 USD ZERO_RATE_CURRENCY'):
        with patch('cc.fx', {'USD': 1.0, 'ZERO_RATE_CURRENCY': 0.0}):
            with patch('builtins.print') as mock_print:
                cc.function1()
                mock_print.assert_called_once_with('100.0 of currency USD amounts to 0.0 of currency ZERO_RATE_CURRENCY today')

def test_function1_conversion_rate_not_available():
    with patch('builtins.input', return_value='100 USD NOT_AVAILABLE_CURRENCY'):
        with patch('cc.fx', {'USD': 1.0}):
            with pytest.raises(KeyError):
                cc.function1()
