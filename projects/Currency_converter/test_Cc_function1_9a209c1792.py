# Test generated by RoostGPT for test py-sample using AI Type Open AI and AI Model gpt-4

"""
1. Scenario: When the input query is "Q", the function should exit the system.
2. Scenario: When the input query is "SHOW", the function should print a list of available currencies and call itself again for further user input.
3. Scenario: When the input query is of the form "qty fromC toC", the function should properly split the query, convert the currencies to uppercase, convert the quantity to a floating-point number rounded to 2 decimal places, calculate the amount of target currency, and print the conversion result.
4. Scenario: When the input query is of the form "qty fromC toC", but the fromC and toC are not valid currencies, the function should raise an exception or provide an appropriate error message.
5. Scenario: When the input query is of the form "qty fromC toC", but the qty is not a valid number, the function should raise an exception or provide an appropriate error message.
6. Scenario: If the input query doesn't contain exactly three parts (qty, fromC, toC), the function should raise an exception or provide an appropriate error message.
7. Scenario: When the input query is of the form "qty fromC toC", but the fromC and toC are the same currency, the function should return the same quantity as input.
8. Scenario: When the input query is of the form "qty fromC toC", but the fromC or toC is not in the list of available currencies, the function should provide an appropriate error message.
9. Scenario: When the input query is empty, the function should raise an exception or provide an appropriate error message.
10. Scenario: When the input query is of the form "qty fromC toC", but the qty is a negative number, the function should raise an exception or provide an appropriate error message.
"""
import pytest
import cc
from unittest.mock import patch, MagicMock
import sys


def test_function1_quit():
    with patch('builtins.input', return_value='Q'):
        with pytest.raises(SystemExit):
            cc.function1()


def test_function1_show():
    with patch('builtins.input', side_effect=['SHOW', 'Q']):
        with patch('cc.pprint') as mock_pprint:
            with pytest.raises(SystemExit):
                cc.function1()
            mock_pprint.assert_called_once_with(cc.currencies)


def test_function1_valid_conversion():
    with patch('builtins.input', return_value='10 USD EUR'):
        with patch('cc.fx', {'USD': 1.0, 'EUR': 0.85}):
            with patch('builtins.print') as mock_print:
                cc.function1()
            mock_print.assert_called_once_with('10.0 of currency USD amounts to 8.5 of currency EUR today')


def test_function1_invalid_currency():
    with patch('builtins.input', return_value='10 USD XYZ'):
        with patch('cc.fx', {'USD': 1.0, 'EUR': 0.85}):
            with pytest.raises(KeyError):
                cc.function1()


def test_function1_invalid_quantity():
    with patch('builtins.input', return_value='abc USD EUR'):
        with patch('cc.fx', {'USD': 1.0, 'EUR': 0.85}):
            with pytest.raises(ValueError):
                cc.function1()


def test_function1_incomplete_query():
    with patch('builtins.input', return_value='10 USD'):
        with patch('cc.fx', {'USD': 1.0, 'EUR': 0.85}):
            with pytest.raises(ValueError):
                cc.function1()


def test_function1_same_currencies():
    with patch('builtins.input', return_value='10 USD USD'):
        with patch('cc.fx', {'USD': 1.0}):
            with patch('builtins.print') as mock_print:
                cc.function1()
            mock_print.assert_called_once_with('10.0 of currency USD amounts to 10.0 of currency USD today')


def test_function1_unavailable_currency():
    with patch('builtins.input', return_value='10 USD XYZ'):
        with patch('cc.fx', {'USD': 1.0}):
            with pytest.raises(KeyError):
                cc.function1()


def test_function1_empty_query():
    with patch('builtins.input', return_value=''):
        with patch('cc.fx', {'USD': 1.0, 'EUR': 0.85}):
            with pytest.raises(ValueError):
                cc.function1()


def test_function1_negative_quantity():
    with patch('builtins.input', return_value='-10 USD EUR'):
        with patch('cc.fx', {'USD': 1.0, 'EUR': 0.85}):
            with pytest.raises(ValueError):
                cc.function1()
